# !pip install nvdlib
resourceUrl = []
resourceName = []
resourceTags = []
resourceRefsource = []
description_ = []

v2_vectorString=[]
v2_accessVector=[]
v2_accessComplexity=[]
v2_confidentialityImpact=[]
v2_integrityImpact=[]
v2_availabilityImpact=[]
v2_baseScore = []
v2_exploitabilityScore = []
v2_impactScore = []
v2_obtainAllPrivilege=[]
v2_obtainUserPrivilege = []
v2_obtainOtherPrivilege = []
v2_userInteractionRequired = []


v3_vectorString=[]
v3_attackVector=[]
v3_attackComplexity=[]
v3_privilegesRequired=[]
v3_userInteraction=[]
v3Scope=[]
v3_confidentialityImpact=[]
v3_integrityImpact=[]
v3_availabilityImpact=[]
v3_baseScore = []
v3_exploitabilityScore = []
v3_impactScore = []
v3_baseSeverity=[]
v3_userInteractionRequired = []


metadataId = []
metadataAssigner = []
configs = []
cwe_description= []
cveId=[]
cve_url=[]
cve_v2score=[]
cve_v2vector=[]
cve_v2severity=[]
cve_v2exploitability=[]
cve_v2impactScore=[]
publishedDate=[]
lastModifiedDate=[]
cveScore=[]
scoreVersion=[]
scoreValue=[]
scoreSeverity=[]
cweDescription=[]


import nvdlib
import pandas as pd
import numpy as np
def nvdSearch(keyword):
    camera_search = nvdlib.searchCPE(keyword = keyword, limit=50)
    for eachCPE in camera_search:
        try:
            r = nvdlib.searchCVE(cpeName = eachCPE.name)
            for eachCVE in r:
                cve_search = nvdlib.getCVE(eachCVE.id,cpe_dict=True)
                resource_url = cve_search.cve.references.reference_data[0].url# print(cve_search.cve.references.reference_data[0].url)
                resource_name = cve_search.cve.references.reference_data[0].name# print(cve_search.cve.references.reference_data[0].name)
                resource_refsource = cve_search.cve.references.reference_data[0].refsource# print(cve_search.cve.references.reference_data[0].refsource)
                resource_tags = cve_search.cve.references.reference_data[0].tags
                # for t in tags:
                #   print(t)
                description = cve_search.cve.description.description_data[0].value # print(cve_search.cve.description.description_data[0].value)

                if hasattr(cve_search.impact, 'baseMetricV2'):
                    v2_vector_string = cve_search.impact.baseMetricV2.cvssV2.vectorString # print(cve_search.impact.baseMetricV2.cvssV2.vectorString)
                    v2_access_vector = cve_search.impact.baseMetricV2.cvssV2.accessVector # print(cve_search.impact.baseMetricV2.cvssV2.accessVector)
                    v2_access_complexity = cve_search.impact.baseMetricV2.cvssV2.accessComplexity # print(cve_search.impact.baseMetricV2.cvssV2.accessComplexity)
                    v2_confidentiality_impact = cve_search.impact.baseMetricV2.cvssV2.confidentialityImpact # print(cve_search.impact.baseMetricV2.cvssV2.confidentialityImpact)
                    v2_integrity_impact = cve_search.impact.baseMetricV2.cvssV2.integrityImpact # print(cve_search.impact.baseMetricV2.cvssV2.integrityImpact)
                    v2_availability_impact = cve_search.impact.baseMetricV2.cvssV2.availabilityImpact # print(cve_search.impact.baseMetricV2.cvssV2.availabilityImpact)
                    v2_base_score = cve_search.impact.baseMetricV2.cvssV2.baseScore # print(cve_search.impact.baseMetricV2.cvssV2.baseScore)
                    v2_severity = cve_search.impact.baseMetricV2.severity # print(cve_search.impact.baseMetricV2.severity)
                    v2_exploitability_score = cve_search.impact.baseMetricV2.exploitabilityScore # print(cve_search.impact.baseMetricV2.exploitabilityScore)
                    v2_impact_score = cve_search.impact.baseMetricV2.impactScore # print(cve_search.impact.baseMetricV2.impactScore)


                    v2_vectorString.append(v2_vector_string)
                    v2_accessVector.append(v2_access_vector)
                    v2_accessComplexity.append(v2_access_complexity)
                    v2_confidentialityImpact.append(v2_confidentiality_impact)
                    v2_integrityImpact.append(v2_integrity_impact)
                    v2_availabilityImpact.append(v2_availability_impact)
                    v2_baseScore.append(v2_base_score)
                    v2_exploitabilityScore.append(v2_exploitability_score)
                    v2_impactScore.append(v2_impact_score)


                elif hasattr(cve_search.impact, 'baseMetricV3'):
                    v3_vector_string = cve_search.impact.baseMetricV3.cvssV3.vectorString # print(cve_search.impact.baseMetricV2.cvssV2.vectorString)
                    v3_attack_vector = cve_search.impact.baseMetricV3.cvssV3.attackVector # print(cve_search.impact.baseMetricV2.cvssV2.accessVector)
                    v3_attack_complexity = cve_search.impact.baseMetricV3.cvssV3.attackComplexity # print(cve_search.impact.baseMetricV2.cvssV2.accessComplexity)
                    v3_privileges_required = cve_search.impact.baseMetricV3.cvssV3.privilegesRequired # print(cve_search.impact.baseMetricV2.cvssV2.accessComplexity)
                    v3_user_interaction = cve_search.impact.baseMetricV3.cvssV3.userInteraction # print(cve_search.impact.baseMetricV2.cvssV2.accessComplexity)
                    v3_scope = cve_search.impact.baseMetricV3.cvssV3.scope # print(cve_search.impact.baseMetricV2.cvssV2.accessComplexity)
                    v3_confidentiality_impact = cve_search.impact.baseMetricV3.cvssV3.confidentialityImpact # print(cve_search.impact.baseMetricV2.cvssV2.confidentialityImpact)
                    v3_integrity_impact = cve_search.impact.baseMetricV3.cvssV3.integrityImpact # print(cve_search.impact.baseMetricV2.cvssV2.integrityImpact)
                    v3_availability_impact = cve_search.impact.baseMetricV3.cvssV3.availabilityImpact # print(cve_search.impact.baseMetricV2.cvssV2.availabilityImpact)
                    v3_base_score = cve_search.impact.baseMetricV3.cvssV3.baseScore # print(cve_search.impact.baseMetricV2.cvssV2.baseScore)
                    v3_base_severity = cve_search.impact.baseMetricV3.cvssV3.baseSeverity # print(cve_search.impact.baseMetricV2.severity)  
                    v3_exploitability_score = cve_search.impact.baseMetricV3.exploitabilityScore # print(cve_search.impact.baseMetricV2.exploitabilityScore)
                    v3_impact_score = cve_search.impact.baseMetricV3.impactScore # print(cve_search.impact.baseMetricV2.impactScore)

                    v3_vectorString.append(v3_vector_string)
                    v3_attackVector.append(v3_attack_vector)
                    v3_attackComplexity.append(v3_attack_complexity)
                    v3_privilegesRequired.append(v3_privileges_required)
                    v3_userInteraction.append(v3_user_interaction)
                    v3Scope.append(v3_scope)
                    v3_confidentialityImpact.append(v3_confidentiality_impact)
                    v3_integrityImpact.append(v3_integrity_impact)
                    v3_availabilityImpact.append(v3_availability_impact)
                    v3_baseScore.append(v3_base_score)
                    v3_exploitabilityScore.append(v3_exploitability_score)
                    v3_impact_score.append(v3_impact_score)
                    v3_baseSeverity.append(v3_base_severity)

                else:
                    np.nan
                metadata_id = cve_search.cve.CVE_data_meta.ID # print(cve_search.cve.CVE_data_meta.ID)
                metadata_assigner = cve_search.cve.CVE_data_meta.ASSIGNER # print(cve_search.cve.CVE_data_meta.ASSIGNER)

                config = cve_search.configurations.nodes
                # for eachNode in config:
                #     for eachCpe in eachNode.cpe_match:
                #       print(eachCpe.cpe23Uri)

                for i in cve_search.cwe:
                    for v in i.description:
                        cwe_description=v.value# print(v.value)
                        cweDescription.append(cwe_description)


                cve_id = cve_search.id# print(cve_search.id)
                url = cve_search.url# print(cve_search.url)
                v2score = cve_search.v2score# print(cve_search.v2score)
                v2vector = cve_search.v2vector# print(cve_search.v2vector)
                v2severity = cve_search.v2severity# print(cve_search.v2severity)
                v2exploitability = cve_search.v2exploitability # print(cve_search.v2exploitability)
                v2impactScore = cve_search.v2impactScore # print(cve_search.v2impactScore)
                cve_score = cve_search.score # print(cve_search.score)
                published_date = cve_search.publishedDate # print(cve_search.publishedDate)
                last_modified_date = cve_search.lastModifiedDate # print(cve_search.lastModifiedDate)



                resourceUrl.append(resource_url)
                resourceName.append(resource_name)
                resourceTags.append(resource_tags)
                resourceRefsource.append(resource_refsource)
                description_.append(description)


                metadataId.append(metadata_id)
                metadataAssigner.append(metadata_assigner)
                configs.append(config)
                cveId.append(cve_id)
                cve_url.append(url)
                cve_v2score.append(v2score)
                cve_v2vector.append(v2vector)
                cve_v2severity.append(v2severity)
                cve_v2exploitability.append(v2exploitability)
                cve_v2impactScore.append(v2impactScore)
                publishedDate.append(published_date)
                lastModifiedDate.append(last_modified_date)
    #             scoreVersion.append(score_version)
    #             scoreValue.append(score_value)
    #             scoreSeverity.append(score_severity)
                cveScore.append(cve_search.score)
                df = pd.DataFrame.from_dict({
                  "cve_id": cveId,
                  "metadataId": metadataId,
                  "resourceName": resourceName,
                  "resourceRefsource": resourceRefsource,
                  "resource_url": resourceUrl,
                  'resource_tags':resourceTags,
                  "description": description_,
                  "cweDescription":cweDescription,
                  "metadataAssigner":metadataAssigner,
                  "v2_vectorString":v2_vectorString,
                  "v2_accessVector":v2_accessVector,
                  "v2_accessComplexity":v2_accessComplexity,
                  "v2_confidentialityImpact":v2_confidentialityImpact,
                  "v2_integrityImpact":v2_integrityImpact,
                  "v2_availabilityImpact":v2_availabilityImpact,
                  "v2_baseScore":v2_baseScore,
                  "v2_exploitabilityScore":v2_exploitabilityScore,
                  "v2_impactScore":v2_impactScore,
                  "url":cve_url,
                  "v2score":cve_v2score,
                  "v2vector":cve_v2vector,
                  "v2severity":cve_v2severity,
                  "v2exploitability":cve_v2exploitability,
                  "v2impactScore":cve_v2impactScore,
                  "cveScore":cveScore,
    #               "scoreVersion":scoreVersion,
    #               "scoreValue":scoreValue,
    #               "scoreSeverity":scoreSeverity,
                  "publishedDate":publishedDate,
                  "lastModifiedDate":lastModifiedDate

                  }, orient='index').T

        except:
            pass
#     print(df)
    df3 = df.cveScore.apply(pd.Series)

    df3.columns = ['score', 'version']
    df = pd.concat([df,df3], axis=1)
    df = df.fillna(value=np.nan)
    
    return df