import imp
import vulners

from test_us_data import test_us_data
from standardize_vulnersHomeAuto import standardize_vulnersHomeAuto
from standardize_xforceHomeAuto import standardize_xforceHomeAuto
from nvdSearch_homeAutomation import nvdSearch_homeAutomation
from standardize_vulnersAudio import standardize_vulnersAudio
from standardize_xforceAudio import standardize_xforceAudio
from nvdSearch_audio import nvdSearch_audio
from standardize_vulnersCamera import standardize_vulnersCamera
from standardize_xforceCamera import standardize_xforceCamera
from nvdSearch_camera import nvdSearch_camera
import pandas as pd
import numpy as np
vulners_api = vulners.Vulners(api_key="NQII4UGXJH1IS1V0TLHAYFVSQ2MQAOGLAKP7RIEAN2TI9EI9GMJVKFJKU3EITE2R")

# print(test_us_data())

predicted_device_type = test_us_data()
# print(predicted_device_type)
# print(set(predicted_device_type))

def search_database():
    
    for j in list(set(predicted_device_type)):
        if j == "HomeAutomation":
            vha = standardize_vulnersHomeAuto()
            xfha = standardize_xforceHomeAuto()
            nvdha = nvdSearch_homeAutomation()
            combine_ha = pd.concat([vha,xfha,nvdha], axis=0)
            combine_ha = combine_ha.dropna(axis=0)
            combine_ha = combine_ha.reset_index(drop=True)
            combine_ha.fillna(value=np.nan, inplace=True)
        elif j == "Audio":
            va = standardize_vulnersAudio()
            xfa = standardize_xforceAudio()
            nvda = nvdSearch_audio()
            combine_audio = pd.concat([va,xfa,nvda], axis=0)
            combine_audio = combine_audio.dropna(axis=0)
            combine_audio = combine_audio.reset_index(drop=True)
            combine_audio.fillna(value=np.nan, inplace=True)
        elif j == "Camera":
            vc = standardize_vulnersCamera()
            xfc = standardize_xforceCamera()
            nvdc = nvdSearch_camera()
            combine_camera = pd.concat([vc,xfc,nvdc], axis=0)
            combine_camera = combine_camera.dropna(axis=0)
            combine_camera = combine_camera.reset_index(drop=True)
            combine_camera.fillna(value=np.nan, inplace=True)

        else:
            None
    return combine_ha, combine_audio, combine_camera
            
            

            
            
            
    