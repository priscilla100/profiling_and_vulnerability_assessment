import pandas as pd
import glob
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix 
import sklearn
from sklearn.multiclass import OneVsRestClassifier
from time import time
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import metrics
from sklearn.metrics import classification_report
import numpy as np
from sklearn import tree
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn import preprocessing
from sklearn.preprocessing import LabelBinarizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold
from sklearn.metrics import f1_score,roc_curve, precision_recall_curve, auc, make_scorer, recall_score, accuracy_score, precision_score, confusion_matrix
from sklearn.metrics import precision_recall_fscore_support
from sklearn.preprocessing import LabelEncoder

import matplotlib.pyplot as plt
plt.style.use("ggplot")

from IPython.core.pylabtools import figsize
import os
figsize(10, 8)




def trained_cic_model():
    path = '/Users/mac/Library/CloudStorage/OneDrive-UniversityofNewBrunswick/CIC_CSV_category/Audio' # use your path
    all_files = glob.glob(path + "/*.csv")
    li = []
    for filename in all_files:
        df = pd.read_csv(filename)
        df["inter_arrival_time"].loc[0] = 0 
        df["time_since_previously_displayed_frame"] = np.cumsum(df["inter_arrival_time"])
        
        li.append(df)

    cic_speaker = pd.concat(li, axis=0, ignore_index=True)
    cic_speaker.drop([ 'label'], axis=1, inplace=True)
    cic_speaker['label'] = 'Audio'
    #cic_speaker.drop(cic_speaker.index[1400:],0,inplace=True)
    cic_speaker = cic_speaker.sample(n = 10000 )

    cic_speaker.head()

    path = '/Users/mac/Library/CloudStorage/OneDrive-UniversityofNewBrunswick/CIC_CSV_category/Bulb' # use your path
    all_files = glob.glob(path + "/*.csv")
    li = []

    for filename in all_files:
        df = pd.read_csv(filename)
        df["inter_arrival_time"].loc[0] = 0 
        df["time_since_previously_displayed_frame"] = np.cumsum(df["inter_arrival_time"])
        
        li.append(df)

    cic_bulb = pd.concat(li, axis=0, ignore_index=True)
    cic_bulb.drop([ 'label'], axis=1, inplace=True)
    cic_bulb['label'] = 'Bulb'
    #cic_speaker.drop(cic_speaker.index[1400:],0,inplace=True)
    #cic_speaker = cic_speaker.sample(n = 10000 )

    cic_bulb.head()

    path = '/Users/mac/Library/CloudStorage/OneDrive-UniversityofNewBrunswick/CIC_CSV_category/Plug' # use your path
    all_files = glob.glob(path + "/*.csv")
    li = []

    for filename in all_files:
        df = pd.read_csv(filename)
        df["inter_arrival_time"].loc[0] = 0 
        df["time_since_previously_displayed_frame"] = np.cumsum(df["inter_arrival_time"])
        
        li.append(df)

    cic_plug = pd.concat(li, axis=0, ignore_index=True)
    cic_plug.drop([ 'label'], axis=1, inplace=True)
    cic_plug['label'] = 'Plug'
    # cic_speaker.drop(cic_speaker.index[1400:],0,inplace=True)
    #cic_speaker = cic_speaker.sample(n = 10000 )

    cic_plug.head()

    path = '/Users/mac/Library/CloudStorage/OneDrive-UniversityofNewBrunswick/CIC_CSV_category/Appliances' # use your path
    all_files = glob.glob(path + "/*.csv")
    li = []

    for filename in all_files:
        df = pd.read_csv(filename)
        df["inter_arrival_time"].loc[0] = 0 
        df["time_since_previously_displayed_frame"] = np.cumsum(df["inter_arrival_time"])
        
        li.append(df)

    cic_appliances = pd.concat(li, axis=0, ignore_index=True)
    cic_appliances.drop(['Unnamed: 0','label'], axis=1, inplace=True)
    cic_appliances['label'] ='Appliances'
    # cic_speaker.drop(cic_speaker.index[1400:],0,inplace=True)
    #cic_speaker = cic_speaker.sample(n = 10000 )

    cic_appliances.head()

    path = '/Users/mac/Library/CloudStorage/OneDrive-UniversityofNewBrunswick/CIC_CSV_category/HomeAutomation' # use your path
    all_files = glob.glob(path + "/*.csv")
    li = []

    for filename in all_files:
        df = pd.read_csv(filename)
        df["inter_arrival_time"].loc[0] = 0 
        df["time_since_previously_displayed_frame"] = np.cumsum(df["inter_arrival_time"])
        
        li.append(df)

    cic_home_automation = pd.concat(li, axis=0, ignore_index=True)
    cic_home_automation.drop(['label'], axis=1, inplace=True)
    cic_home_automation['label'] ='HomeAutomation'
    # cic_speaker.drop(cic_speaker.index[1400:],0,inplace=True)
    #cic_speaker = cic_speaker.sample(n = 10000 )

    cic_home_automation.head()

    path = '/Users/mac/Library/CloudStorage/OneDrive-UniversityofNewBrunswick/CIC_CSV_category/Camera' # use your path
    all_files = glob.glob(path + "/*.csv")
    li = []

    for filename in all_files:
        df = pd.read_csv(filename)
        df["inter_arrival_time"].loc[0] = 0 
        df["time_since_previously_displayed_frame"] = np.cumsum(df["inter_arrival_time"])
        
        li.append(df)

    cic_camera = pd.concat(li, axis=0, ignore_index=True)
    cic_camera.drop(['label'], axis=1, inplace=True)
    cic_camera['label'] = 'Camera'
    # cic_speaker.drop(cic_speaker.index[1400:],0,inplace=True)
    cic_camera = cic_camera.sample(n = 10000 )

    cic_camera.head()

    path = '/Users/mac/Library/CloudStorage/OneDrive-UniversityofNewBrunswick/CIC_CSV_category/SmartHub' # use your path
    all_files = glob.glob(path + "/*.csv")
    li = []

    for filename in all_files:
        df = pd.read_csv(filename)
        df["inter_arrival_time"].loc[0] = 0 
        df["time_since_previously_displayed_frame"] = np.cumsum(df["inter_arrival_time"])
        
        li.append(df)

    cic_smart_hub = pd.concat(li, axis=0, ignore_index=True)
    cic_smart_hub.drop([ 'label'], axis=1, inplace=True)
    cic_smart_hub['label'] ='SmartHub'
    # cic_speaker.drop(cic_speaker.index[1400:],0,inplace=True)
    # cic_speaker = cic_speaker.sample(n = 10000 )

    cic_smart_hub.head()

    path = '/Users/mac/Library/CloudStorage/OneDrive-UniversityofNewBrunswick/CIC_CSV_category/TV' # use your path
    all_files = glob.glob(path + "/*.csv")
    li = []

    for filename in all_files:
        df = pd.read_csv(filename)
        df["inter_arrival_time"].loc[0] = 0 
        df["time_since_previously_displayed_frame"] = np.cumsum(df["inter_arrival_time"])
        
        li.append(df)

    cic_TV = pd.concat(li, axis=0, ignore_index=True)
    cic_TV.drop([ 'label'], axis=1, inplace=True)
    cic_TV['label'] ='TV'
    # cic_speaker.drop(cic_speaker.index[1400:],0,inplace=True)
    #cic_speaker = cic_speaker.sample(n = 10000 )

    cic_TV.head()


    home_automate = [
        cic_home_automation,
        cic_appliances,
        cic_smart_hub
    ]
    home_automate = pd.concat(home_automate)
    home_automate.drop(['label'], axis=1, inplace=True)
    home_automate['label'] = 'HomeAutomation'
    home_automate = home_automate.sample(n = 10000)

    home_automate

    cic_same_device_as_us_lab = [
        cic_camera,
    #     multimedia,
        cic_speaker,
    #     cic_home_automation,
    #     cic_smart_hub, 
        home_automate
    #     cic_appliances,
    #     cic_TV
    ]


    # le = LabelEncoder()

    cic_same_device_as_us_lab = pd.concat(cic_same_device_as_us_lab)
    # cic_same_device_as_us_lab['label_code'] = le.fit_transform(cic_same_device_as_us_lab['label'])

    # data.fillna(0, inplace=True)
    # y = cic_same_device_as_us_lab["label"]
    y = cic_same_device_as_us_lab["label"]
    # print(y.unique())
    X = cic_same_device_as_us_lab.drop(['label','Unnamed: 0'], axis = 1)

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1) # 80% training and 30% test
    rf_cic_lab=(RandomForestClassifier(n_estimators=100,oob_score=True))
    t0 = time()
    rf_cic_lab = rf_cic_lab.fit(X_train,y_train)
    rf_predicted =rf_cic_lab.predict(X_test)
    accuracy = accuracy_score(y_test,rf_predicted)
    #print (rf.oob_score_)
    # print ("Accuracy: ", accuracy)
    #acc, score = rf.evaluate(x_test, y_test)
    # print("Time: ", time()-t0)   
    # creating a confusion matrix 
    rf_cm = confusion_matrix(y_test, rf_predicted)
    # print("Confusion Matrix: ", rf_cm)
        
    return rf_cic_lab
    
# print(trained_cic_model())

